{
	"info": {
		"_postman_id": "f246333f-f03c-44f3-aa77-724e117a356f",
		"name": "StormTrack Testing",
		"description": "StartFragment\n\nWeather-based shipping API adalah sebuah web service yang memanfaatkan data cuaca untuk menghitung estimasi waktu pengiriman barang dari suatu kota ke kota lain di Indonesia. Untuk mengumpulkan data cuaca, API ini menggunakan layanan dari penyedia data cuaca seperti OpenWeatherMap. Selain itu, API ini juga menggunakan layanan dari RajaOngkir untuk memperoleh informasi tentang biaya pengiriman dan estimasi waktu pengiriman berdasarkan jarak antara dua kota, serta layanan dari GeoDB untuk mendapatkan data lokasi dan koordinat kota-kota yang ingin dikirimkan barangnya.\n\nDalam API ini, pengguna dapat memasukkan informasi tentang kota asal dan kota tujuan barang yang ingin dikirimkan. Kemudian, API akan memberikan informasi tentang estimasi waktu pengiriman dan biaya pengiriman berdasarkan informasi cuaca dan jarak antara kedua kota.\n\nAPI ini dapat digunakan oleh berbagai macam bisnis dan industri yang membutuhkan layanan pengiriman barang, seperti e-commerce, logistik, dan transportasi. Dengan memanfaatkan data cuaca, API ini dapat memberikan estimasi waktu pengiriman yang lebih akurat dan membantu pengguna untuk mengatur jadwal pengiriman secara lebih efisien. Selain itu, integrasi dengan layanan dari RajaOngkir dan GeoDB juga memungkinkan pengguna untuk memperoleh informasi biaya pengiriman dan estimasi waktu pengiriman yang lebih akurat berdasarkan jarak antara kedua kota.\n\n  \n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27672552"
	},
	"item": [
		{
			"name": "Developer",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "Register Dev Sukses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "ryks",
											"type": "default"
										},
										{
											"key": "email",
											"value": "ryk@gmail.com",
											"type": "default"
										},
										{
											"key": "password",
											"value": "ryk123",
											"type": "default"
										},
										{
											"key": "confirm_password",
											"value": "ryk123",
											"type": "default"
										},
										{
											"key": "display_name",
											"value": "ReyKeys",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/dev/register",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"dev",
										"register"
									]
								},
								"description": "Endpoint ini berfungsi untuk melakukan Registrasi Developer ke dalam database, di dalam Endpoint ini usernamenya tidak boleh sama satu dengan yang lain, dalam artian usernamenya harus unik.  \n\nConfirm password dan password tentunya harus juga sama."
							},
							"response": []
						},
						{
							"name": "Register Dev Username terpakai",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Username sudah terpakai\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Username sudah terpakai');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "ryks",
											"type": "default"
										},
										{
											"key": "email",
											"value": "ryk@gmail.com",
											"type": "default"
										},
										{
											"key": "password",
											"value": "ryk123",
											"type": "default"
										},
										{
											"key": "confirm_password",
											"value": "ryk123",
											"type": "default"
										},
										{
											"key": "display_name",
											"value": "ReyKeys",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/dev/register",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"dev",
										"register"
									]
								},
								"description": "Endpoint ini berfungsi untuk melakukan Registrasi Developer ke dalam database, di dalam Endpoint ini usernamenya tidak boleh sama satu dengan yang lain, dalam artian usernamenya harus unik.  \n\nConfirm password dan password tentunya harus juga sama."
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login Dev Password salah",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Password salah\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Password salah');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "ryks",
											"type": "default"
										},
										{
											"key": "password",
											"value": "ryk1234",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/login",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"login"
									]
								},
								"description": "Endpoint ini digunakan developer untuk login dengan akun dan passwordnya, lalu akan menghasilkan kode acces token untuk per akun yang login."
							},
							"response": []
						},
						{
							"name": "Login Dev Sukses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "ryks",
											"type": "default"
										},
										{
											"key": "password",
											"value": "ryk123",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/login",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"login"
									]
								},
								"description": "Endpoint ini digunakan developer untuk login dengan akun dan passwordnya, lalu akan menghasilkan kode acces token untuk per akun yang login."
							},
							"response": []
						}
					]
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Update Data Developer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Berhasil terupdate\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Berhasil terupdate');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{devToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "ryks@gmail.com",
											"type": "default"
										},
										{
											"key": "display_name",
											"value": "ReyKeys",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/dev/update",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"dev",
										"update"
									]
								},
								"description": "Endpoint ini berfungsi untuk mengubah data developer, semisal untuk mengubah email, ataupun nama akun developer, dapat dilakukan di endpoint ini."
							},
							"response": []
						},
						{
							"name": "Top Up Saldo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Berhasil Topup\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Berhasil Topup');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{devToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "amount",
											"value": "50000",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/dev/topup",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"dev",
										"topup"
									]
								},
								"description": "Endpoint ini dapat digunakan untuk melakukan topup saldo terhadap developer. Jumlah Saldo yang di topup dapat diubah melalui Body di key amount."
							},
							"response": []
						},
						{
							"name": "Subscribe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Berhasil subscribe\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).include(\"Berhasil membeli paket\").and.not.include(\"undefined\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{devToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "subscription_package",
											"value": "gold",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/dev/subscribe",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"dev",
										"subscribe"
									]
								},
								"description": "Endpoint ini digunakan untuk membeli Subscribe, dimana jika membeli subscribe terdapat paket\" terentu yang memilik harga yang berbeda\", serta menghasilkan Api-Hit yang berbeda\" pula, semisal ada paket gold, silver, bronze.\n\nUntuk paket bronze mendapatkan 10 api hit, harganya 10.000  \nUntuk paket silver mendapatkan 25 api hit, harganya 20.000  \nUntuk paket gold mendapatkan 40 api hit, harganya 30.000"
							},
							"response": []
						}
					]
				},
				{
					"name": "Get",
					"item": [
						{
							"name": "Show Courier Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response body should return array of objects', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    for (h of responseJson){\r",
											"        pm.expect(h).to.ownProperty('user_id');\r",
											"        pm.expect(h).to.ownProperty('Nama');\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{devToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/api/dev/couriers?name=",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"dev",
										"couriers"
									],
									"query": [
										{
											"key": "name",
											"value": ""
										}
									]
								},
								"description": "Endpoint ini digunakan untuk melihat semua kurir, lalu dalam endpoint ini juga dapat mencari kurir berdasarkan nama kurir"
							},
							"response": []
						},
						{
							"name": "Show Courier Params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response body should return object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('user_id');\r",
											"    pm.expect(responseJson).to.ownProperty('Nama');\r",
											"    pm.expect(responseJson).to.ownProperty('No_Telp');\r",
											"    pm.expect(responseJson).to.ownProperty('ProfPic');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{devToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/api/dev/couriers/:user_id",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"dev",
										"couriers",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "US002"
										}
									]
								},
								"description": "Endpoint ini berfungsi untuk menampilkan data courier yang dicari berdasarkan ID kurirnya"
							},
							"response": []
						},
						{
							"name": "Show Cities Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response body should return array of objects', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    for (h of responseJson){\r",
											"        pm.expect(h).to.ownProperty('city_id');\r",
											"        pm.expect(h).to.ownProperty('name');\r",
											"        pm.expect(h).to.ownProperty('Province');\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{devToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/api/dev/cities?name=jak",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"dev",
										"cities"
									],
									"query": [
										{
											"key": "name",
											"value": "jak"
										}
									]
								},
								"description": "Endpoint ini berfungsi untuk menampilkan data semua kota, data yang ditampilkan juga dapat di filter berdasarkan nama kota yang memiliki huruf yang di request"
							},
							"response": []
						},
						{
							"name": "Show Cities Params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response body should return object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('city_id');\r",
											"    pm.expect(responseJson).to.ownProperty('name');\r",
											"    pm.expect(responseJson).to.ownProperty('Province');\r",
											"    pm.expect(responseJson).to.ownProperty('latitude');\r",
											"    pm.expect(responseJson).to.ownProperty('longitude');\r",
											"    pm.expect(responseJson).to.ownProperty('postal_code');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{devToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/api/dev/cities/:city_id",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"dev",
										"cities",
										":city_id"
									],
									"variable": [
										{
											"key": "city_id",
											"value": "15"
										}
									]
								},
								"description": "Endpoint ini berfungsi untuk menampilkan data yang lebih detail mengenai kota yang di masukkan ke dalam endpoint, berdasarkan kode kotanya."
							},
							"response": []
						}
					]
				},
				{
					"name": "Shipping",
					"item": [
						{
							"name": "Get Estimate Shipping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response body should return object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('city_origin');\r",
											"    pm.expect(responseJson).to.ownProperty('city_destination');\r",
											"    pm.expect(responseJson).to.ownProperty('weather_city_origin');\r",
											"    pm.expect(responseJson).to.ownProperty('weather_city_destination');\r",
											"    pm.expect(responseJson).to.ownProperty('weight');\r",
											"    pm.expect(responseJson).to.ownProperty('disclaimer');\r",
											"    pm.expect(responseJson).to.ownProperty('courier');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{devToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/api/dev/shipping/estimate?city_from=84&city_to=30&weight=1000",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"dev",
										"shipping",
										"estimate"
									],
									"query": [
										{
											"key": "city_from",
											"value": "84"
										},
										{
											"key": "city_to",
											"value": "30"
										},
										{
											"key": "weight",
											"value": "1000"
										}
									]
								},
								"description": "Endpoint ini berfungsi untuk Menampilkan berapa kira\" durasi perjalan sebuah pengiriman, data yang ditampilkan mulai dari apa nama perusahaan jasa kirim yg akan dipakai, jasa apa yang akan dipilih dalam perusahaan tersebut, estimasi durasi pengiriman, serta berapa kira kira biaya pengirimannya."
							},
							"response": []
						},
						{
							"name": "Add Shipping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Berhasil menambah Shipping\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Berhasil menambah Shipping');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{devToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "city_from",
											"value": "84",
											"type": "text"
										},
										{
											"key": "city_to",
											"value": "30",
											"type": "text"
										},
										{
											"key": "weight",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "courier",
											"value": "jne",
											"type": "text"
										},
										{
											"key": "service",
											"value": "reg",
											"type": "text"
										},
										{
											"key": "notes",
											"value": "Fragile",
											"type": "text"
										},
										{
											"key": "picture",
											"type": "file",
											"src": "/D:/WebService/Proyek/fotofoto/barang.jpg"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/dev/shipping",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"dev",
										"shipping"
									]
								},
								"description": "Endpoint ini digunakan untuk membuat shipping baru oleh developer, sehingga terdapat shipping baru yang dpt dilihat oleh kurir"
							},
							"response": []
						},
						{
							"name": "Delete Shipping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Shipping -ID- telah dihapus\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).include(\"telah dihapus\").and.not.include(\"undefined\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{devToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/api/dev/shipping/:shipping_id",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"dev",
										"shipping",
										":shipping_id"
									],
									"variable": [
										{
											"key": "shipping_id",
											"value": "SP001"
										}
									]
								},
								"description": "Endpoint ini digunakan untuk menghapus shipping yang sudah di add sebelumnya."
							},
							"response": []
						}
					]
				}
			],
			"description": "Endpoint yang dikhususkan untuk digunakan oleh Developer, Jadi untuk menggunakan Endpoint\" di dalam folder ini harus memiliki authorisasi sebagai developer, kecuali untuk register Developer tidak diperlukan."
		},
		{
			"name": "Courier",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "Register Courier Sukses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "sakul",
											"type": "text"
										},
										{
											"key": "password",
											"value": "skl123",
											"type": "text"
										},
										{
											"key": "confirm_password",
											"value": "skl123",
											"type": "text"
										},
										{
											"key": "display_name",
											"value": "RTMX",
											"type": "text"
										},
										{
											"key": "no_telp",
											"value": "081234567890",
											"type": "text"
										},
										{
											"key": "profpic",
											"type": "file",
											"src": "/D:/WebService/Proyek/fotofoto/ktp.jpg"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/courier/register",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"courier",
										"register"
									]
								},
								"description": "Endpoint ini digunakan sebagai tempat register kurir baru, kurir baru tidak boleh memiliki username yang sama dengan kurir yang lain. terdapat juga pengecekan password dan confirm password harus sama.  \n  \nKurir juga diminta untuk melampirkan foto dalam bentuk jpg dan nomor telfon mereka"
							},
							"response": []
						},
						{
							"name": "Register Courier Username terpakai",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Username sudah terpakai\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Username sudah terpakai');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "sakul",
											"type": "text"
										},
										{
											"key": "password",
											"value": "skl123",
											"type": "text"
										},
										{
											"key": "confirm_password",
											"value": "skl123",
											"type": "text"
										},
										{
											"key": "display_name",
											"value": "RTMX",
											"type": "text"
										},
										{
											"key": "no_telp",
											"value": "081234567890",
											"type": "text"
										},
										{
											"key": "profpic",
											"type": "file",
											"src": "/D:/WebService/Proyek/fotofoto/ktp.jpg"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/courier/register",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"courier",
										"register"
									]
								},
								"description": "Endpoint ini digunakan sebagai tempat register kurir baru, kurir baru tidak boleh memiliki username yang sama dengan kurir yang lain. terdapat juga pengecekan password dan confirm password harus sama.  \n  \nKurir juga diminta untuk melampirkan foto dalam bentuk jpg dan nomor telfon mereka"
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login Cour Password Salah",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Password salah\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Password salah');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "sakul",
											"type": "default"
										},
										{
											"key": "password",
											"value": "skl1234",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/login",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"login"
									]
								},
								"description": "Endpoint ini digunakan kurir untuk login dengan akun dan passwordnya, lalu akan menghasilkan kode acces token untuk per akun yang login."
							},
							"response": []
						},
						{
							"name": "Login Cour Sukses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "sakul",
											"type": "default"
										},
										{
											"key": "password",
											"value": "skl123",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/login",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"login"
									]
								},
								"description": "Endpoint ini digunakan kurir untuk login dengan akun dan passwordnya, lalu akan menghasilkan kode acces token untuk per akun yang login."
							},
							"response": []
						}
					]
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Update Courier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Berhasil Update\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Berhasil Update');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{couToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "display_name",
											"value": "RTMX",
											"type": "default"
										},
										{
											"key": "old_password",
											"value": "skl123",
											"type": "default"
										},
										{
											"key": "new_password",
											"value": "skl123",
											"type": "default"
										},
										{
											"key": "no_telp",
											"value": "08123414324",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{HOST}}/api/courier/update",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"courier",
										"update"
									]
								},
								"description": "Endpoint ini digunakan untuk mengubah data kurir, password kurir, serta no telfon kurir.  \n  \nUntuk melakukan perubahan password, tentunya disini juga diperlukan old passwordnya."
							},
							"response": []
						}
					]
				},
				{
					"name": "Shipping",
					"item": [
						{
							"name": "Get Unordered Shipping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response body should return array of objects', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    for (h of responseJson){\r",
											"        pm.expect(h).to.ownProperty('shipping_id');\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{couToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{HOST}}/api/courier/takeorder",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"courier",
										"takeorder"
									]
								},
								"description": "Menampilkan semua shipping yang belum diambil oleh kurir lain / masih belum dikerjakan."
							},
							"response": []
						},
						{
							"name": "Take Order Sukses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Kurir -name- berhasil mengambil order barang dengan kode -id-\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).include(\"berhasil mengambil order barang dengan kode\").and.not.include(\"undefined\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{couToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{HOST}}/api/courier/takeorder/:shipping_id",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"courier",
										"takeorder",
										":shipping_id"
									],
									"variable": [
										{
											"key": "shipping_id",
											"value": "SP002"
										}
									]
								},
								"description": "Endpoint ini duganakan untuk mengambil Order / Shipping. Jika sudah mengambil maka statusnya akan sedang mengantarkan barang."
							},
							"response": []
						},
						{
							"name": "Take Order Sibuk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Kurir -name- sedang mengantarkan barang\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.include('sedang mengantarkan barang').and.not.include(\"undefined\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{couToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{HOST}}/api/courier/takeorder/:shipping_id",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"courier",
										"takeorder",
										":shipping_id"
									],
									"variable": [
										{
											"key": "shipping_id",
											"value": "SP002"
										}
									]
								},
								"description": "Endpoint ini duganakan untuk mengambil Order / Shipping. Jika sudah mengambil maka statusnya akan sedang mengantarkan barang."
							},
							"response": []
						},
						{
							"name": "Cancel Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'Berhasil cancel pengiriman barang -id-\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).include(\"Berhasil cancel pengiriman barang\").and.not.include(\"undefined\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{couToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{HOST}}/api/courier/cancel",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"api",
										"courier",
										"cancel"
									]
								},
								"description": "Endpoint ini digunakan oleh kurir untuk mencancel order / pengiriman yang sebelumnya sudah di take terlebih dahulu oleh kurir itu sendiri."
							},
							"response": []
						}
					]
				}
			],
			"description": "StartFragment\n\nEndpoint yang dikhususkan untuk digunakan oleh Kurir, Jadi untuk menggunakan Endpoint\" di dalam folder ini harus memiliki authorisasi sebagai kurir, kecuali untuk register kurir tidak diperlukan.\n\nEndFragment"
		},
		{
			"name": "All Roles",
			"item": [
				{
					"name": "Get Shipping Latest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response body should return array of objects', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    for (h of responseJson){\r",
									"        pm.expect(h).to.ownProperty('shipping_id');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{couToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/shipping/latest",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"shipping",
								"latest"
							]
						},
						"description": "Endpoint ini digunakan untuk melihat shipping\" yang sudah selesai"
					},
					"response": []
				},
				{
					"name": "Get Detail Shipping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response body should return object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('shipping_id');\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson).to.ownProperty('courier');\r",
									"    pm.expect(responseJson).to.ownProperty('detail');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{devToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/shipping/:shipping_id",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"shipping",
								":shipping_id"
							],
							"variable": [
								{
									"key": "shipping_id",
									"value": "SP002"
								}
							]
						},
						"description": "Endpoint ini digunakan untuk melihat detail shipping yang sedang berjalan, detail ini dapat dilihat oleh developer maupun kurir\n\nDapat terlihat juga kurir yang terlibat dalam proses shipping"
					},
					"response": []
				},
				{
					"name": "Shipping Weather Conditions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response body should return object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('city_from');\r",
									"    pm.expect(responseJson).to.ownProperty('city_to');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{couToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/api/weather/:shipping_id",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"weather",
								":shipping_id"
							],
							"variable": [
								{
									"key": "shipping_id",
									"value": "SP002"
								}
							]
						},
						"description": "Endpoint ini digunakan untuk melihat cuaca dari sebuah shipping yang sedang / akan berjalan"
					},
					"response": []
				},
				{
					"name": "Update Status Shipping Sukses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response should return message', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    if (pm.request.body.status == '1'){\r",
									"        pm.expect(responseJson.message).to.include(\"sedang Siap Dikirim\").and.not.include(\"undefined\");\r",
									"    }else if (pm.request.body.status == '3'){\r",
									"        pm.expect(responseJson.message).to.include(\"sudah Tiba di Tujuan\").and.not.include(\"undefined\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{couToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "status",
									"value": "3",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{HOST}}/api/shipping/:shipping_id",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"shipping",
								":shipping_id"
							],
							"variable": [
								{
									"key": "shipping_id",
									"value": "SP002"
								}
							]
						},
						"description": "Endpoint ini digunakan oleh Kurir untuk mengupdate status kurir tersebut dalam memproses suatu shipping"
					},
					"response": []
				},
				{
					"name": "Update Status Shipping Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response should return \\'Status tidak valid\\'', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals(\"Status tidak valid\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{couToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "status",
									"value": "2",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{HOST}}/api/shipping/:shipping_id",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"api",
								"shipping",
								":shipping_id"
							],
							"variable": [
								{
									"key": "shipping_id",
									"value": "SP002"
								}
							]
						},
						"description": "Endpoint ini digunakan oleh Kurir untuk mengupdate status kurir tersebut dalam memproses suatu shipping"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Picture",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{HOST}}/api/getPict?file=profpic_sakul.jpg",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"api",
						"getPict"
					],
					"query": [
						{
							"key": "file",
							"value": "profpic_sakul.jpg"
						}
					]
				},
				"description": "Digunakan untuk melihat foto"
			},
			"response": []
		}
	]
}